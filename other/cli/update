#!/bin/bash
#####################
##      update     ##
########################################################
## Обновить среду и файлы проекта с репчика на GitHub ##
########################################################
: '
  
  1. Остановить проект
  2. Определить название группы конфигов для запуска приложения
  3. Определить, запускать ли проект после обновления
  4. Удалить все образы проекта
  5. Получить URL репозитория проекта, проверить его
  6. Проверить существование .gitignore в корне проекта
  7. Скачать новые файлы проекта, заменить ими старые

'
#########################################################################
func_wrapper_update () { 

  # 1. Остановить проект
  . app down

  # 2. Определить название группы конфигов для запуска приложения
  # - Которую надо будет применить для запуска приложения

    # 2.1. Подготовить значение по умолчанию
    cogfigs_group=$cogfigs_group_default

    # 2.2. Если команде update переданы какие-то опции
    if [ $# != 0 ]; then
      
      # Провести парсинг этих опций
      OPTIND=1
      while getopts ":c:" opt; do
        case $opt in

          # Если опция -c передана
          c)
            # Если:
            # - Значение опции -c не пусто
            # - Существует группа опций с таким именем
            # То:
            # - Записать это значение в $cogfigs_group
            if [ -n "$OPTARG" ] && [ -d "$PWD/configs/groups/$OPTARG" ]; then
              cogfigs_group=$OPTARG
            fi
            ;;
        esac
      done      

    fi

  # 3. Определить, запускать ли проект после обновления

    # 3.1. Подготовить значение по умолчанию
    is_up_after_update=1

    # 3.2. Если команде up переданы какие-то опции
    if [ $# != 0 ]; then
      
      # Провести парсинг этих опций
      OPTIND=1
      while getopts ":n" opt; do
        case $opt in

          # Если опция -n передана
          n)
            # Назначить $is_up_after_update=1
            is_up_after_update=0
            ;;
        esac
      done      

    fi

  # 4. Удалить все образы проекта

    # 4.1. Сообщить о начале остановки проекта
    echo -en "$YELLOW--- app update ---> Удаляю все образы проекта...$NORMAL"    

    # 4.2. Остановить проект
    {
      docker-compose rm   
    } || {
      echo -e "$RED--- app update ---> Ошибка! Cм.строку $LINENO скрипта $BASH_SOURCE$NORMAL"
      return
    }

    # 4.3. Сообщить об успехе
    echo -e "$GREEN Успех! $NORMAL"

  # 5. Получить URL репозитория проекта, проверить его  

    # 5.1. Получить url
    
      # Получить
      url=$project_github_url
     
      # Сообщить
      echo -e "$YELLOW--- app update ---> Из конфига CLI-приложения (other/cli/config) получен URL репозитория проекта: '$url'$NORMAL"

    # 5.2. Проверить, установлен ли git
    # - Он потребуется, чтобы скачать проект с github
    command -v git >/dev/null 2>&1 || { 
      echo -e >&2 "$RED--- app update ---> Ошибка! Для обновления проекта требуется наличие установленного git, но оный найден. $NORMAL"; 
    }    

    # 5.3. Проверить, доступен ли github-репчик по адресу $url
    
      # Сообщить о начале проверки
      echo -en "$YELLOW--- app update ---> Проверяю существование такого репозитория...$NORMAL"

      # Проверить
      GIT_ASKPASS=true git ls-remote "$url" > /dev/null 2>&1
      if [ "$?" -ne 0 ] && [ -n $url ]
        then 
          echo -e "$RED Не существует! Завершаю. $NORMAL"
          return
        else 
          echo -e "$GREEN Существует! $NORMAL"
      fi

  # 6. Проверить существование .gitignore в корне проекта
  echo -ne "$YELLOW--- app update ---> Проверяю существование необходимого файла .gitignore в корне проекта...$NORMAL"
  if [ -f .gitignore ]
    then 
      echo -e "$GREEN Существует! $NORMAL"
    else 
      echo -e "$RED Не существует! Завершаю. $NORMAL"
      return
  fi

  # 7. Скачать новые файлы проекта, заменить ими старые
  {

    # 7.1. Создать временный каталог, скопировать в него файлы
    # mkdir tmp4git
    # git clone https://github.com/4gekkman/projects-devapp tmp4git

    :

  } || {
    echo -e "$RED--- app update ---> Ошибка! Cм.строку $LINENO скрипта $BASH_SOURCE$NORMAL"
    return
  }





:;}
func_wrapper_update "$@"







# #########################################################
# #                                                       #
# # Остановить приложение, обновить все образы, запустить #
# #                                                       #
# #########################################################

#   # 1] Подключить алиасы
#   . aliases
  
#   # 2] Остановить проект, удалить контейнеры
#   . down
#   docker-compose stop
#   docker-compose rm

#   # 3] Если есть флаг --update-files, обновить файлы проекта кроме data
#   if [[ $1 == "--update-files" ]] || [[ $2 == "--update-files" ]] 
#   then
    
#     rm tmp4git
#     mkdir tmp4git
#     git clone https://github.com/4gekkman/projects-devapp tmp4git
#     rm -rf rmp4git/data
#     cp -rf tmp4git/. .
#     rm -rf tmp4git

#   fi  
  
#   # 4] Запустить проект
#   . up $@


